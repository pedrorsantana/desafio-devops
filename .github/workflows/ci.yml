name: CI/CD_Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  push:
  pull_request:

env:
  OS: 'ubuntu-latest'
  NODE_VERSION: '20'
  BUILD_DIR: build
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # >> Continous Integration (CI) <<
  lint-and-test:
    name: Lint and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20, 22]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Verificar README.md obrigatÃ³rio
        uses: ./.github/actions/check-readme-action

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install & Lint & Test
        run: |
          npm ci
          npm run lint
          npm run test -- --watch=false --code-coverage

      - name: Upload coverage report
        if: matrix.node == env.NODE_VERSION && matrix.os == env.OS
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ github.workspace }}/coverage/desafio-devops/lcov.info

  quality-gate:
    name: Quality Gate
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Static Analysis (SonarQube)
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  build:
    name: Build
    needs: quality-gate
    runs-on: ubuntu-latest
    #TODO: Uncomment to run on build or release only
    #if: startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build app
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ${{ github.workspace }}/dist/desafio-devops/browser

  # >> Continous Delivery (CD) <<
  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: release-content/


      - name: Set up Git for tagging
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Determine next version
        id: version
        run: |
          TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo v0.0.0)
          VERSION=$(echo "$TAG" | sed -E 's/^v//' | awk -F. -v OFS=. '{$3+=1; print}')
          NEXT="v$VERSION"
          echo "current=$TAG" >> $GITHUB_OUTPUT
          echo "next=$NEXT" >> $GITHUB_OUTPUT

      - name: Create and push Git tag
        run: |
          git tag ${{ steps.version.outputs.next }}
          git push origin ${{ steps.version.outputs.next }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.next }}
          name: Release ${{ steps.version.outputs.next }}
          files: |
            $(find release-content -type f -size +0c)

  deploy:
    name: Deploy
    needs: create-release
    runs-on: ubuntu-latest
    environment:
      name: main
    permissions:
      contents: write 
      id-token: write
      pages: write
    steps:
      - name: Download release
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: deploy-package/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy-package/
